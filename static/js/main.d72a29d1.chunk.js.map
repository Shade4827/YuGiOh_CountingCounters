{"version":3,"sources":["index.tsx"],"names":["Zone","props","className","value","onClick","onClickL","onClickR","Field","renderZone","i","zones","App","useState","field","total","setField","current","totalStr","handleReset","next","nextField","nextTotal","ReactDOM","render","document","getElementById"],"mappings":"+LA0BMA,EAAO,SAACC,GACV,OACI,gCACI,8BACI,wBAAQC,UAAU,OAAlB,SACKD,EAAME,UAGf,gCACI,wBAAQC,QAAS,kBAAIH,EAAMI,YAA3B,SACK,MAEL,wBAAQD,QAAS,kBAAIH,EAAMK,YAA3B,SACK,aAOfC,EAAQ,SAACN,GACX,IAAMO,EAAa,SAACC,GAChB,OACI,cAACT,EAAD,CACIG,MAAOF,EAAMS,MAAMD,GACnBJ,SAAU,kBAAIJ,EAAMI,SAASI,IAC7BH,SAAU,kBAAIL,EAAMK,SAASG,OAKzC,OACI,gCACI,sBAAKP,UAAU,kBAAf,UACKM,EAAW,GACXA,EAAW,GACXA,EAAW,GACXA,EAAW,GACXA,EAAW,MAEhB,sBAAKN,UAAU,oBAAf,UACKM,EAAW,GACXA,EAAW,GACXA,EAAW,GACXA,EAAW,GACXA,EAAW,GACXA,EAAW,OAEhB,sBAAKN,UAAU,WAAf,UACKM,EAAW,IACZ,sBACCA,EAAW,OAEhB,sBAAKN,UAAU,uBAAf,UACKM,EAAW,IACXA,EAAW,IACXA,EAAW,IACXA,EAAW,IACXA,EAAW,IACXA,EAAW,OAEhB,sBAAKN,UAAU,kBAAf,UACKM,EAAW,IACXA,EAAW,IACXA,EAAW,IACXA,EAAW,IACXA,EAAW,WAMtBG,EAAM,WAAoB,IAAD,EACDC,mBAAoB,CAC1CC,MAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACtDC,MAAO,IAHgB,mBACpBD,EADoB,KACbE,EADa,KAMrBC,EAAUH,EACVI,EAAW,SAAWD,EAAQF,MAkC9BI,EAAc,WAMhBH,EAL8B,CAC1BF,MAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACtDC,MAAO,KAef,OACI,sBAAKZ,UAAU,MAAf,UACI,qBAAKA,UAAU,YAAf,SACI,cAACK,EAAD,CACIG,MAAOM,EAAQH,MACfR,SAvDK,SAACI,GAClB,IAAMU,EAAmB,YAAqB,IAAnBN,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,MACxBM,EAAYP,EAElB,OADAO,EAAUX,KACH,CACHI,MAAOO,EACPN,MAAOA,EAAM,GALI,CAOtBE,GAEHD,EAASI,IA8CGb,SA3CK,SAACG,GAClB,IAAMU,EAAmB,YAAqB,IACpCC,EADmC,EAAlBP,MAEnBQ,EAFqC,EAAXP,MAS9B,OALGM,EAAUX,GAAG,IACZW,EAAUX,IAAI,EACdY,GAAW,GAGR,CACHR,MAAOO,EACPN,MAAOO,GAXU,CAatBL,GAEHD,EAASI,QA8BL,sBAAKjB,UAAU,aAAf,UACI,qBAAKA,UAAU,OAAf,SAAuBe,IAhB3B,wBAAQb,QAASc,EAAjB,SAFM,iBAyBlBI,IAASC,OAAO,cAACZ,EAAD,IAASa,SAASC,eAAe,W","file":"static/js/main.d72a29d1.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { Repeat } from \"typescript-tuple\"\r\n\r\ntype ZoneState = number\r\n\r\ntype ZoneProps = {\r\n    value: ZoneState\r\n    onClickL: () => void\r\n    onClickR: () => void\r\n}\r\n\r\ntype FieldState = Repeat<ZoneState,24>\r\n\r\ntype FieldProps = {\r\n    zones: FieldState\r\n    onClickL: (i: number) => void\r\n    onClickR: (i: number) => void\r\n}\r\n\r\ntype FieldInfo = {\r\n    field: FieldState\r\n    total: number\r\n}\r\n\r\nconst Zone = (props: ZoneProps): JSX.Element => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <button className=\"zone\">\r\n                    {props.value}\r\n                </button>\r\n            </div>\r\n            <div>\r\n                <button onClick={()=>props.onClickL()} >\r\n                    {\"+\"}\r\n                </button>\r\n                <button onClick={()=>props.onClickR()} >\r\n                    {\"-\"}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n} \r\n\r\nconst Field = (props: FieldProps): JSX.Element => {\r\n    const renderZone = (i: number) => {\r\n        return (\r\n            <Zone \r\n                value={props.zones[i]} \r\n                onClickL={()=>props.onClickL(i)} \r\n                onClickR={()=>props.onClickR(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"field-spelltrap\">\r\n                {renderZone(0)}\r\n                {renderZone(1)}\r\n                {renderZone(2)}\r\n                {renderZone(3)}\r\n                {renderZone(4)}\r\n            </div>\r\n            <div className=\"field-monster-top\">\r\n                {renderZone(5)}\r\n                {renderZone(6)}\r\n                {renderZone(7)}\r\n                {renderZone(8)}\r\n                {renderZone(9)}\r\n                {renderZone(10)}\r\n            </div>\r\n            <div className=\"field-ex\">\r\n                {renderZone(11)}\r\n                <a></a>\r\n                {renderZone(12)}\r\n            </div>\r\n            <div className=\"field-monster-bottom\">\r\n                {renderZone(13)}\r\n                {renderZone(14)}\r\n                {renderZone(15)}\r\n                {renderZone(16)}\r\n                {renderZone(17)}\r\n                {renderZone(18)}\r\n            </div>\r\n            <div className=\"field-spelltrap\">\r\n                {renderZone(19)}\r\n                {renderZone(20)}\r\n                {renderZone(21)}\r\n                {renderZone(22)}\r\n                {renderZone(23)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst App = (): JSX.Element => {\r\n    const [field, setField] = useState<FieldInfo>({\r\n        field: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n        total: 0,\r\n    })\r\n\r\n    const current = field\r\n    const totalStr = \"total:\" + current.total\r\n\r\n    const handleClickL = (i: number) => {\r\n        const next: FieldInfo = (({field, total}) => {\r\n            const nextField = field\r\n            nextField[i]++\r\n            return {\r\n                field: nextField,\r\n                total: total+1,\r\n            }\r\n        })(current)\r\n\r\n        setField(next)\r\n    }\r\n\r\n    const handleClickR = (i: number) => {\r\n        const next: FieldInfo = (({field, total}) => {\r\n            const nextField = field\r\n            let nextTotal = total\r\n            \r\n            if(nextField[i]>0){\r\n                nextField[i]-=1\r\n                nextTotal-=1\r\n            }\r\n\r\n            return {\r\n                field: nextField,\r\n                total: nextTotal,\r\n            }\r\n        })(current)\r\n\r\n        setField(next)\r\n    }\r\n\r\n    const handleReset = () => {\r\n        const resetField: FieldInfo = {\r\n            field: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n            total: 0,\r\n        }\r\n\r\n        setField(resetField)\r\n    }\r\n\r\n    const renderReset = () => {\r\n        const desc = `Reset`\r\n        return (\r\n            <button onClick={handleReset}>\r\n                {desc}\r\n            </button>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"app-field\">\r\n                <Field \r\n                    zones={current.field} \r\n                    onClickL={handleClickL} \r\n                    onClickR={handleClickR} \r\n                />\r\n            </div>\r\n            <div className=\"app-button\">\r\n                <div className=\"text\">{totalStr}</div>\r\n                {renderReset()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}